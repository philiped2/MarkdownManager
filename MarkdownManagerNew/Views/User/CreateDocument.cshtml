@model MarkdownManagerNew.Viewmodels.CreateDocumentViewModel

@{
    ViewBag.Title = "CreateDocument";
}

<h2>Nytt dokument</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Titel" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", placeholder = "Beskrivning" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12">
                <div class="form-group col-md-6 markdownEditorForm">
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Markdown, new { htmlAttributes = new { @class = "form-control markdownEditor" } })
                        @Html.ValidationMessageFor(model => model.Markdown, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-6 markdownResult"></div>
            </div>
        </div>
        
        <div class="row">
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.CheckboxGroups)
                </dt>

                @for (int i = 0; i < Model.CheckboxGroups.Count; i++)
                {
                    <dd>
                        @Html.CheckBoxFor(x => x.CheckboxGroups[i].IsChecked)
                        @Html.HiddenFor(x => x.CheckboxGroups[i].ID)
                        @Html.HiddenFor(x => x.CheckboxGroups[i].Display)

                        @Html.DisplayFor(x => x.CheckboxGroups[i].Display)
                    </dd>
                }


                <dt>
                    @Html.DisplayNameFor(model => model.CheckboxUsers)
                </dt>

                @for (int i = 0; i < Model.CheckboxUsers.Count; i++)
                {
                    <dd>
                        @Html.CheckBoxFor(x => x.CheckboxUsers[i].IsChecked)
                        @Html.HiddenFor(x => x.CheckboxUsers[i].ID)
                        @Html.HiddenFor(x => x.CheckboxUsers[i].Display)

                        @Html.DisplayFor(x => x.CheckboxUsers[i].Display)
                    </dd>
                }

                <dt>
                    @Html.DisplayNameFor(model => model.CheckboxTags)
                </dt>

                @for (int i = 0; i < Model.CheckboxTags.Count; i++)
                {
                    <dd>
                        @Html.CheckBoxFor(x => x.CheckboxTags[i].IsChecked)
                        @Html.HiddenFor(x => x.CheckboxTags[i].ID)
                        @Html.HiddenFor(x => x.CheckboxTags[i].Display)

                        @Html.DisplayFor(x => x.CheckboxTags[i].Display)
                    </dd>
                }

            </dl>



        </div>
        
        <div class="form-group">
            <div class="col-md-offset-1 col-md-10">
                <input type="submit" value="Skapa" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
